// +build ignore

package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
)

var urls = []string{
	"http://techcrunch.com/2015/11/09/basic-income-createathon/",
	"https://www.youtube.com/watch?v=Ey8FzGECjFA",
	"https://news.ycombinator.com/",
	"https://twitter.com/amix3k/status/679355208091181056",
}

func main() {
	outfile := "./remote-data-autogenerated_test.go"
	flag.StringVar(&outfile, "f", outfile, "`file` to save data to (will be overwritten)")
	flag.Parse()
	if outfile == "" {
		log.Fatal("-f is empty")
	}
	data := make(map[string]string)

	for _, v := range urls {
		u, err := url.Parse(v)
		if err != nil {
			log.Fatal(v, err)
		}
		r, err := http.Get(v)
		if err != nil {
			log.Fatal(v, err)
		}
		if r.StatusCode >= 400 {
			log.Fatal(v, r.Status)
		}
		b, err := ioutil.ReadAll(r.Body)
		if err != nil {
			log.Fatal(v, err)
		}
		r.Body.Close()
		// store key without scheme
		data[u.Host+u.RequestURI()] = string(b)
	}
	if err := dump(data, outfile); err != nil {
		log.Fatal(err)
	}
}

func dump(data map[string]string, name string) error {
	buf := new(bytes.Buffer)
	buf.WriteString(head)
	fmt.Fprintf(buf, "%#v", data)
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	f, err := ioutil.TempFile("", "tmp-pages-")
	if err != nil {
		return err
	}
	defer os.Remove(f.Name())
	defer f.Close()
	if _, err := f.Write(formatted); err != nil {
		return err
	}
	if err := f.Close(); err != nil {
		return err
	}
	return os.Rename(f.Name(), name)
}

const head = `
// do not edit, autogenerated

package unfurlist

var remoteData = `
