// Code generated by go-bindata.
// sources:
// data/providers.json
// DO NOT EDIT!

package unfurlist

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataProvidersJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5d\x6d\x6f\xdb\x38\x12\xfe\xbe\xbf\xc2\xe8\x7d\x0b\x5a\xf9\xda\x7e\x5b\xe0\xb0\x48\x93\xa6\xcd\x5d\x5f\xb2\x71\xae\x8b\xc5\xba\x28\x68\x89\xb6\x58\x4b\xa2\x4a\x52\x4e\xdd\x45\xff\xfb\x92\x94\xac\x57\x3b\x1a\x53\xca\x24\x45\x77\x9b\x04\xf3\xcc\x23\xcf\x0c\xc9\x19\x72\xa8\xfc\xf5\xcb\x44\xff\xf9\xdb\xfe\xdf\xfc\x79\x92\x0a\xbe\x61\x01\x15\x5f\x12\x12\xd3\x27\xbf\x4e\x9e\x5c\x5e\xdc\xdc\xdc\x3c\x79\xba\x47\x22\x13\x91\x11\x08\x95\x4a\x7f\x9d\x4f\xe7\xd3\xdb\xdb\x5b\x8f\x2d\x95\x52\x9e\xcf\xe3\xf9\xb4\x8e\xa1\x49\x90\x72\x96\x28\xa9\x01\x7f\x95\x3f\x6e\x52\x97\xc2\xd2\x0f\x69\x4c\xbb\xa2\xa5\x40\xc9\x58\x63\x13\xd4\x67\x29\x95\xf3\xe9\xc9\x93\x0e\xe8\xf3\xd3\x2e\x49\xcf\xc3\x73\x1a\x2f\x68\xd0\xf8\x10\x25\x34\x60\xd2\xe7\x1b\x2a\xb6\x5a\x81\x12\x19\x6d\x48\xfc\x2c\xbf\xfb\x6c\xbf\xfa\xf9\xb4\xd7\xc2\x7f\xf2\xec\x26\x5b\x50\xb0\x8d\xb7\x3c\x53\x5a\x7e\xa0\x95\x7b\x35\xe7\x26\xc0\x30\xc0\x45\xc4\xfc\xb5\x00\x7f\xfe\xa5\x15\x47\x0b\xb2\x93\x06\x61\x1a\x72\xc5\x6d\x98\x75\x0d\xd3\xc4\x19\x94\xb7\x16\x1a\x32\x28\x28\xeb\xe4\x92\x8a\x0d\xf3\x4d\x94\x63\xc6\xe7\x27\x16\x04\x11\x85\xfb\x67\x93\xcb\xa3\x39\xa8\xc3\xb9\x19\x64\xf0\x86\xaa\xd2\xce\x43\x8d\xf8\x36\x8b\x32\xb0\x05\x43\x2d\x8c\x6a\xbe\x8a\xf0\x96\x28\x3f\x1c\x64\xbf\x4a\x17\x49\xd9\xce\x82\xde\xdf\x4b\x2e\x62\xa2\x7e\x0e\x36\xe4\x27\x16\x53\x0e\xb2\xe4\xc6\x48\xa2\x99\xb1\xc6\xd6\x3f\x37\xd4\x84\x57\x82\x67\xa9\x99\x50\xcc\x4f\x03\xda\x3b\xb7\xc8\xa3\xd8\x3a\xd2\x7b\xe9\x9c\x7c\x5d\x53\x7a\x2f\x8e\x3e\xe3\x51\x44\x57\xf4\x6d\x16\x73\xf8\xdc\xe3\xe7\xa0\xd0\x80\x50\x47\x50\x97\xd8\x9a\x77\xd0\x48\xea\xea\x6c\xdb\x18\x61\xf6\x7f\x6d\x18\xa3\x2d\xc8\x03\x3a\x0e\xbc\xfc\x09\xa3\xed\x88\xa9\x49\x53\xed\xf3\x32\x35\x19\xfa\xd1\xae\xb8\x50\x4b\x1e\xb1\x2c\xee\xfb\x74\xf9\x30\x4a\x4b\x79\xe3\x8d\xfb\x0d\xac\x7d\x8c\xf3\x29\x4d\x94\xd8\xba\xc4\x94\x2c\x0d\xd9\x56\x39\x92\x2d\xd9\x05\xfb\xce\x14\xbc\x4e\xb0\xe2\xf7\x6f\xc6\x5a\x6e\xbf\x23\x9c\x4f\xdf\x64\xfa\xb9\xe6\xd3\x4f\x8c\xde\x0e\xac\x17\x2a\x9d\xaf\x47\xb1\xe2\x2c\xce\x56\xef\xb3\x15\xd8\x8c\x52\xcb\xeb\xbf\x88\xb9\x70\x83\xd1\xd1\x76\x26\x0c\x1b\x7a\x1e\x26\xaf\x3d\xa7\x1b\x46\x12\x45\x44\x27\x0e\xef\xb4\x79\x70\x10\x76\x6f\x46\x6f\x52\x6a\x03\x0a\x05\xc9\x32\xba\xc0\x93\x7f\xcd\xa7\x01\xa0\x74\x21\x1b\x2f\xa6\x10\x0a\xa9\x88\x27\xdd\xf3\xc5\x05\xf1\xd7\xda\x6a\x9d\xe7\x1c\x69\x52\x9a\x45\xfa\xdb\x59\x48\x04\xbc\xb8\x96\x06\x22\x0d\xc4\x4b\xa8\x42\x4b\x1f\xda\xb4\x27\xa0\x0a\x53\xb8\xe1\x02\xea\x86\xa3\xd2\x0d\x97\xaa\xfd\x38\xe7\x89\xb7\xad\xad\x96\x7f\xce\xa7\x2f\x30\xe6\x8e\x3f\xb8\x08\xae\x04\x95\x12\x3e\x75\x68\x44\xba\x43\x8c\x98\x1c\xa5\xd9\x22\x62\xfe\x33\x33\xa7\xb6\x28\x30\xe7\x52\x3f\x64\x62\xd1\x5d\xd0\xef\xce\xd5\x2b\x0c\xca\x38\xb3\x7c\x1e\x53\xce\xa1\x57\x29\x78\x80\x3c\x3c\x59\x2e\x3c\x9f\x80\x8d\x9b\x8b\x23\x25\x05\x3b\xb2\x25\x8b\xdc\xb3\x82\xfa\x53\x0b\x1a\x73\x45\x1f\x2a\x31\x98\xf9\x82\x2d\x02\xf8\x92\x61\xc5\x51\xab\xcd\x3a\x65\xc0\xfd\x61\x93\x69\x4d\xd7\x1e\x7b\x0f\xce\xb2\xb8\x92\xd9\x02\x64\xcc\xc0\x8a\xa2\x19\xb2\x4e\xb7\x19\x52\x0b\xd4\x15\xb5\x2d\x38\xd8\x7e\xa7\x09\xd3\x63\x01\xb6\xe3\x45\x72\x59\x34\x0b\x36\xf8\xd2\x88\x38\x95\xa6\x5d\x4d\xb9\xe5\xb4\x09\x7d\x41\x89\xa2\x83\x4d\x78\x1d\x30\x98\xfd\x84\x16\x44\xac\xa5\x2a\x3a\x9d\xf8\x32\x09\xcc\xe9\x2b\x54\x4a\x79\x1a\xd1\x41\x83\xbf\xf6\x08\xf5\x1c\x6a\xb0\xc9\xdf\xb3\xef\x67\x11\xcf\x60\x93\x68\xcc\xbe\xfb\x46\x18\x75\x0a\x6d\x92\x9e\xd8\xbf\xee\x76\x6c\x6a\x1b\xcd\x8c\x67\xd1\x36\x05\x99\xd0\xd7\x82\x36\x33\xc1\xc8\xa3\x76\x5c\xfd\xd1\x5a\x8a\x9a\xc9\x21\x2a\x42\xdc\x6d\x82\xd0\xf9\x6d\xa9\x0d\x39\x19\xa0\x34\x81\xef\x40\xcb\x5c\x1e\x3b\x1d\xa8\x38\x07\xc5\x71\x43\xd3\xbd\x6c\xeb\x5f\x64\x49\xb2\xfd\x28\xce\x19\xbc\x26\x5f\x1a\x88\xae\x6d\xd8\xd0\x33\xef\xe3\xac\xda\xa6\x1d\x78\x5e\xb2\x4f\xe5\xd8\xc6\xbd\xe2\x51\x34\x39\x27\x41\x00\xdb\xaf\x4f\xb5\x78\x60\xa4\xd1\x76\xb2\x1a\x8c\x3a\x5b\x82\x2d\x79\x2d\x94\xf9\xd6\x09\x28\x88\x62\xc9\xca\xdd\x85\x2d\x75\xa3\x4d\xf3\x37\x14\xb6\x50\x2a\x1a\x20\x79\xaa\x60\xd2\x5f\x90\x68\x3d\x2c\xe6\xdb\xaa\xc6\x3f\x10\xd6\xc3\xf2\xbf\x47\x6c\x9a\xdb\x71\xfc\x35\xdf\x7b\xc6\x6b\x4f\x28\x29\xab\x32\xb9\x2f\x7e\xbb\x48\xfd\x74\xa6\xbe\x18\x78\x6e\xd1\xd4\x39\xb6\x3f\x66\x24\xe5\x13\xeb\x14\x09\x3c\xa6\x37\xa2\x9e\xd4\x30\x2f\x55\x28\x27\xf5\x75\xc2\x01\xe7\xdf\x4d\x35\x23\xd5\x7b\x1f\x97\x4b\xe6\x33\x12\x4d\x2e\xde\x83\xcc\xc7\x0b\x79\x6f\x89\x11\xcc\x35\x36\x3d\xa0\x05\xf1\xd7\xa0\x29\xbc\x01\xdb\xe5\x82\xee\xd3\x4a\x43\x5d\xbb\xe2\x1e\x2f\x92\xdf\x66\xcb\xe5\xb9\xfe\x0f\xd8\xfb\x14\x6a\xd1\xc0\x8a\x23\xcd\x2c\x4d\xc2\x21\x9b\xea\x6d\x4d\x63\x9d\xbf\x84\xba\x24\x02\xd6\xde\x32\x97\x45\x32\x5d\x8d\x0d\x74\xcc\x65\xc4\x3d\xe6\xde\xce\xd1\xe0\xab\xe5\xd5\xc3\x0b\x6d\xbe\xd8\x4e\xae\x98\xaf\xb2\x23\x0e\xb9\x62\x0d\x4a\x73\x0c\xe2\x22\xd8\x62\x9d\x4f\x33\x3d\x74\x8b\x4e\xa4\x7c\x45\xeb\x73\x83\xd1\xe0\x29\x77\x2f\x98\x22\xb2\xf3\x14\x7c\x9c\xa3\xfb\x17\x2f\xdf\xfe\x0e\x76\xc0\x8b\x97\xe1\x37\x44\xcb\xef\xe8\xac\xb1\x6d\x07\xeb\xa0\xfc\xa1\x52\xf7\xe2\xe5\x68\x81\x7c\x46\x7c\xde\x3b\x53\xe4\x6d\x2c\xbe\x11\xc5\x6a\xc1\x29\xc9\xe6\xd3\x80\x91\x95\x20\xb1\xfb\xba\x55\xd3\x35\xf6\x5a\x75\xce\x52\xa6\x60\x55\x9f\x6d\x62\xb0\xe2\x88\x21\x58\x11\x0e\xdf\x6c\xab\xeb\xda\xd5\x60\x8a\xc5\x34\x62\x09\x1d\xa1\x1a\xbb\xe6\x3c\x96\xe0\xa6\x01\xb1\x93\xf6\xbe\xa6\x08\xb6\xac\xd3\x99\x82\x14\xb6\x6b\xdc\x44\xd1\xa4\x42\x3a\x39\xa1\xab\x6e\xf4\x70\x26\x2c\xda\xc6\x5c\x31\x9e\xc0\x63\xba\xc2\x60\x06\x76\x93\x75\x8c\xbe\xcf\x8e\xca\xd1\x0f\x95\xce\x04\xbf\x0d\x26\xd7\x24\x59\xb3\x04\x56\x38\xfb\x06\x21\x72\x00\x92\x75\xdb\x94\x43\x12\xdc\xae\xae\xfb\xe9\x59\x66\xc2\xcf\x98\x7a\x47\x7a\x0f\x3c\x65\xd5\x06\x91\x63\x22\x82\x72\xf2\x79\x98\xb7\xf8\xde\xbd\xbb\xf4\x4e\xa5\x98\x5b\xf6\x6f\x28\xd7\xeb\x74\x1a\x4e\x5e\x09\xa6\x08\x4b\x26\x24\x09\x26\x97\x82\x46\xfa\x5f\xb8\x5f\x56\x85\x16\x8f\x8b\x95\x97\xad\x91\xce\x04\x3b\xac\x90\x6d\xce\x12\xe4\xf3\xe3\x31\x0c\xd4\xe8\x77\xe2\xdd\xb2\xb5\x5e\x63\x75\x0e\x64\x1e\x4d\xff\xe0\x4b\xeb\x51\xbf\x0c\x48\xca\x3b\x9f\x7a\xcc\x12\xa9\x0c\x87\x37\x54\x8f\xf2\x04\x96\x24\xe9\x27\x7a\x46\x13\x2f\x8c\x58\x9a\x7a\xa6\x5b\x18\xc1\xfb\x1d\xce\x7e\xb7\x68\xc8\x91\xf2\xd6\x04\x0d\x83\x3b\x4f\xaa\x4d\x72\x41\xa5\xb2\x0d\xe6\x61\x7a\x4f\xfe\x3b\x0b\x49\x92\xd0\x68\x72\x29\xcd\x48\x86\xed\x2e\xfa\x39\xe6\x19\xcb\x31\xad\x0f\x8e\x3f\xa4\x57\xab\x23\x87\xa7\x01\x7d\x05\xf9\xf6\xee\x8f\xea\x8e\x97\x50\x05\x27\x5e\xa1\xa2\x0b\x75\xce\x85\x3a\xc6\x1b\x33\xb2\x7e\xcf\xd8\x0f\x6f\xc1\x7e\x80\x53\xcc\x6f\x05\x00\xed\x0c\xb2\x22\x34\x5f\xfd\x78\x76\xe2\x85\x2a\x8e\xdc\xcd\x59\xe9\xab\xdb\x11\x61\x4d\x36\xa6\x3e\xde\xd6\xf8\xc6\x1e\xdd\xda\x0f\x63\xee\x33\x0e\xec\xb9\xf3\x39\x62\xc7\x5d\x45\x06\xdd\xf1\xab\x10\x45\xfe\xe8\x9a\xff\x97\x7a\xee\x25\xef\x9f\xa5\x94\xac\xa9\x38\xa7\xfe\x1a\x96\x60\xca\x1c\x10\x68\x00\xd6\x8e\x77\x93\xb1\xbf\x75\x7f\xef\x83\x3a\xd6\x60\x07\x74\x15\x6e\xf8\x2a\x1b\x55\x7e\xa9\xa0\x3d\x28\xf6\x88\xe4\x0e\xbc\xe3\xf3\x5b\xdd\xdd\xc7\x1d\xea\xf0\xd3\x28\x0d\xc9\xe4\x34\x4d\x27\x1f\x68\xef\xad\xb7\xe2\xf2\x9d\x81\x78\x44\x67\x4b\xf6\xce\xc2\x42\x57\xa4\x92\xe6\x1b\x31\x12\xa7\xea\x6b\x3d\xc1\x09\x68\xff\xa8\xb8\x88\x68\x5f\x7b\xd0\xc0\x3a\x5f\x42\x34\x4f\x61\xef\x2b\x94\xda\x0e\xcf\x8b\x0f\xe5\xdf\x3f\x2f\x04\x87\x6d\x8c\x6c\x97\x5a\x12\xb1\x69\xb4\xc6\xd7\x3f\x7d\xe6\xc2\xd9\xb0\x06\x8e\x1a\x63\xcf\x2a\xf6\x50\xde\xba\x4c\x74\xe9\x61\xb6\xe6\x61\x23\x91\xed\xc4\x91\xa6\xde\x06\x5f\xf1\x3e\x90\x3e\xcf\x15\x18\x8f\x00\x00\x7b\x3e\xd5\x91\xa0\x8a\xc6\x29\x4a\xcc\x60\x6e\xd1\x3f\xbe\x20\x99\xf1\x2c\x09\xe0\x4d\xc9\xd2\x88\xe3\xb6\x25\xb7\x29\x9d\xd7\xd9\x96\x9e\xb1\x3a\x53\x92\xc9\x29\x8f\x60\x4d\x29\x89\x47\x78\x84\x66\xb8\x3a\xdd\xb0\xed\xf7\xba\x26\x1d\xd5\x83\x6d\xf6\x3f\xe6\xaf\xa5\xb9\xd7\x7a\xc4\xfb\x73\xd6\x15\x06\xf1\x1c\xa3\xc5\xaa\xa7\x03\xc1\xbf\x52\x7f\x40\x97\xce\x5e\xad\xa3\x1f\x65\xfc\x5f\x2a\x41\xfb\x67\xfe\xf2\x89\xb2\x5c\xde\x53\x1b\x94\xe5\xba\xa2\x83\xed\xa0\xec\xe4\x87\xdc\xaf\x6f\x7e\xcc\xc7\x38\x17\xdb\xe3\xbd\xc9\x7b\x16\xc1\x7b\x56\xf2\x43\x31\x8d\x40\x3f\xdb\x2b\x38\x6b\xf7\x6d\xf2\x17\x71\xb0\x01\xaf\x9b\x33\x2b\x66\x4b\x7b\xee\xa5\xdf\x72\x97\xfc\xe7\x50\x4d\xf4\x60\xab\xe7\x9a\x2a\x3f\x5c\xf6\x1f\x6c\xe5\x2b\xd0\x4e\x1a\xab\xb8\xad\xf3\x99\x3e\xa1\x80\x46\xb0\x17\x29\x8d\x86\xd4\x41\xb1\xe4\x91\x36\x86\x7b\x50\xb4\x34\x3e\xbe\x61\xfb\x9e\x52\x95\xc1\x2e\x24\xd9\x86\x2f\x2b\x8e\x14\x02\x15\x19\xa8\x93\xcc\x48\x7b\xa9\x93\xaf\xaa\x77\xe9\xd4\x39\x1f\x9f\xb7\x4e\x4d\xc7\xe1\x2c\x21\x29\xec\xa4\x84\x18\x71\x69\xc4\x91\x3c\xd6\x24\x9c\x4f\xd7\xee\xb3\x69\x4b\x53\x91\x64\x60\x6e\xb8\xd2\x80\xfb\xf0\x14\xcf\x4a\x23\x99\xb9\xe4\xb2\x57\xc5\xdd\x67\xa7\x9a\x9e\x31\xcf\x60\xae\xb5\xb2\xe0\x75\xb2\x22\xab\xde\x5c\x20\x1f\x78\xc2\x00\xa8\x05\x60\xf5\x00\xb6\x28\x8b\x7b\x4b\x6e\xf3\x46\x47\xd7\x98\xc6\xfc\x28\xc8\xe4\xe6\x13\x38\x0c\xb9\x20\x36\x41\x74\xb6\x21\x60\x87\x76\x6f\x6f\xc5\x8e\x78\xd7\x15\x72\xb2\x4b\x7b\x46\xdb\x91\x7f\x43\x95\xda\x4e\x2e\x63\x6d\x66\xd8\xf4\x97\x1f\x36\x6a\x10\xb3\x18\xb4\xda\x75\xa5\xb6\x1e\x73\xcf\xf5\xf3\x1d\xf4\xce\x83\x3f\xbe\xd5\x88\xc4\x67\xa1\xae\x03\xe5\xe4\x1d\xdb\xd0\xc9\xeb\x80\x29\xe0\x6b\x1d\x23\x2d\xef\x91\xd8\xb7\x68\x34\xb7\xec\x61\x75\xf4\xd0\x1e\x4d\x63\xbd\x73\x4f\x2f\xee\x82\x4e\x4e\x85\x62\x7e\xd4\x1f\xe6\xd5\xf0\x63\xd2\x00\x71\xdb\xcd\xea\x9c\x43\x3a\xcc\xea\x7a\x46\xbb\x80\x79\x99\x2c\xf9\x31\xfb\xc7\x46\xda\xee\x99\x62\x58\xaf\x46\xe7\x6a\xb8\x9a\x8a\xb1\x3a\x48\x4d\x38\xbf\x8a\xb8\xbf\x86\x4f\xaf\x76\x08\x2c\x2c\x06\x6d\x1c\xe7\xaf\xc7\xea\x52\xbb\xbf\x33\x27\x9f\x71\x3b\x0a\x9f\x7b\xff\x1e\x2f\x27\xa2\x11\x25\x92\xfe\xc1\x8e\xb8\xd3\x23\x72\xcc\x2d\xc3\x19\xd8\x79\x2e\x53\xb1\xb9\xde\xa8\x36\xee\x91\x21\x15\xdd\xe7\xc7\xec\x18\xbd\x09\xe9\x76\x32\x23\x2c\x98\xcc\x80\x77\x50\x94\x46\x48\x0d\x90\x28\x2f\x8c\xd9\xcf\x69\x17\x7c\xf7\x49\xa1\xad\x8e\x7e\x57\x34\x91\x8c\x27\xc8\xaf\xdb\x7a\x47\x89\x48\x58\xb2\x3a\x4d\x53\xdb\x2f\x06\xcb\x0a\x0a\x10\x29\x40\x38\x49\x41\x87\xd4\x35\x27\xe8\x28\x2a\x5a\x21\xd2\x30\xc5\x30\xf9\x2c\xe4\x42\x7d\xe0\x0a\x58\x72\xd9\x37\x83\x18\x48\xa2\x21\xf6\xce\x07\x56\xd6\xd0\x64\xcd\xbb\x86\xcc\xb7\x03\x0a\xb0\xae\x5a\xcc\x60\xb7\x97\x0d\xc1\x29\x5b\xb5\xe0\x90\x02\x81\x36\xb7\xef\x61\x1d\xb2\x60\x36\x35\x8d\xf7\xe6\x0c\x9e\xc2\x2f\xbd\x29\x2d\xec\x49\x9c\x5e\xee\x06\x9f\xf3\x44\xdd\x55\x85\x19\xab\xd7\x54\x2b\x5b\x7c\x20\x90\x5b\x58\xb2\x96\x88\x18\x54\x42\xaa\xeb\x4b\x58\x93\x45\x97\x19\xb0\x8d\x7f\x00\x68\x4e\xd1\x1d\x5f\x15\x73\x97\x5e\xbc\x0d\xc9\x57\x11\xf1\xd7\x4b\x93\x4d\xf5\x5f\xc0\xcf\x9f\x78\x71\x00\x71\x5f\x2e\xab\xf3\xd9\xe3\xe6\x25\x8b\x68\xfe\xab\x29\x6c\xcb\x77\xbf\xef\x0e\x69\xd0\xa6\x4e\x75\x91\x58\x53\xe5\xe6\xc3\xa6\x7e\x3c\xdf\x7d\xcc\xe2\xde\x59\xad\xb6\x99\xa6\xa5\x71\x07\x5a\xc5\xe8\xf4\xab\x76\xf6\x29\xc2\x33\xee\xeb\x95\xae\x38\xa8\xa9\xf8\x61\xab\xaf\x15\x37\x05\xb4\xe7\x13\x15\xf2\x88\x7d\xcb\xa8\xb7\x14\x38\x8b\xf0\x41\x72\xd7\xb5\xf8\xa0\x42\xe4\x06\xf5\x6b\xaa\x4b\xbf\xb7\xc0\x26\x75\x61\x84\xc3\x6c\xe1\x31\x5f\xaf\x83\x82\xad\x42\x85\xf6\x76\xf6\x83\xdc\x4b\x41\xe9\x15\x97\xca\x23\xbe\xfa\xcd\xf5\x22\xf5\x21\xe5\x45\x39\xa0\x55\xa3\xdc\x16\x20\xea\x15\x27\xb0\xdf\xde\xc1\xe2\x95\x09\x9d\x05\xf7\x08\x8e\x03\x9a\x84\x8e\x86\x6e\x2a\xe9\xe9\x3b\x7f\xa8\x2d\xf2\x4f\x54\x48\xd8\x86\xcf\xc6\x48\x7a\xf6\x36\xe6\x88\xaf\x92\x6f\x68\xbd\x87\x57\x41\xcf\x58\xd4\x7b\x3d\xa2\x2a\xd1\xb4\xb0\x5e\x1a\xb0\x7e\xad\xc9\x8e\x8d\x7e\x4f\x23\x2e\xfa\xee\xdb\x49\x37\x58\x1b\x25\x6b\xd7\x5a\x8e\x61\x93\x43\xaf\xc3\x34\x0c\x8c\x59\x52\x98\xb7\x59\x13\x25\x8e\xa9\x27\xc8\x0e\x82\x9b\xe3\xb4\x68\x8b\x6e\x48\x90\xa7\x0e\x43\xdd\x32\xa5\x96\xbe\x9d\xbf\xa0\xd7\x66\x06\xaf\x0e\x3c\xa0\x85\x99\x41\x4e\xf3\x4b\x79\xb3\x96\xa1\x5c\x2b\xab\x13\x82\x5c\x74\x14\xa4\x3a\xc0\x38\x9e\x68\x3f\xcc\x2d\x0e\xda\x7a\x6c\xca\xb6\x79\x8e\x99\xb6\x5d\x11\xa9\x8c\x36\xf0\xe8\x4d\x73\x00\x52\x24\xd4\xd8\x60\xd7\x9a\xc0\xf2\xfb\x3e\x10\x38\x00\x5a\x18\xf7\x7a\xa9\xa1\x68\x2c\xaf\xff\xf2\xf9\x9f\x00\x00\x00\xff\xff\x1d\x92\x55\xdd\x06\x7a\x00\x00")

func dataProvidersJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataProvidersJson,
		"data/providers.json",
	)
}

func dataProvidersJson() (*asset, error) {
	bytes, err := dataProvidersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/providers.json", size: 31238, mode: os.FileMode(416), modTime: time.Unix(1450276480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/providers.json": dataProvidersJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"providers.json": &bintree{dataProvidersJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
